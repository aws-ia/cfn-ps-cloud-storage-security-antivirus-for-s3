AWSTemplateFormatVersion: 2010-09-09
Description: Version 1.00.000 - CloudFormation template for CloudStorageSec (CSS) Console software alongside a AWS TransferFamily deployment. (qs-1uc9a1c0k)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters:
          - UserName
          - Email
        Label:
          default: User configuration
      - Parameters:
          - VPC
          - SubnetA
          - SubnetB
          - ConsoleSecurityGroupCidrBlock
        Label:
          default: Network configuration
      - Parameters:
          - AgentScanningEngine
          - MultiEngineScanningMode
          - AgentDiskSize
          - EnableLargeFileScanning
          - LargeFileDiskSize
          - BucketsToProtect
        Label:
          default: Cloud Storage Security configuration
      - Parameters:
          - ExistingTransferFamilyServer
        Label:
          default: AWS Transfer Family
      - Parameters:
          - QSDisableAutoProtect
        Label:
          default: AWS Partner Solution configuration
    ParameterLabels:
      UserName:
        default: Cloud Storage Security console username
      Email:
        default: Administrator email address
      VPC:
        default: Virtual private cloud (VPC) ID
      SubnetA:
        default: Subnet A ID
      SubnetB:
        default: Subnet B ID
      ConsoleSecurityGroupCidrBlock:
        default: Console security group CIDR block
      AgentScanningEngine:
        default: Agent scanning engine
      MultiEngineScanningMode:
        default: Multi-engine scanning mode
      AgentDiskSize:
        default: Agent disk size
      EnableLargeFileScanning:
        default: Enable large file scanning
      LargeFileDiskSize:
        default: Extra-large file disk size
      ExistingTransferFamilyServer:
        default: Existing Transfer Family server
      BucketsToProtect:
        default: S3 buckets to protect
      QSDisableAutoProtect:
        default: Partner Solution disable auto-protect
Parameters:
  UserName:
    Type: String
    Description: Username of the Cloud Storage Security console administrator.
    MinLength: 1
    MaxLength: 128
    Default: admin
  Email:
    Type: String
    Description: Email address of the Cloud Storage Security console administrator.
    AllowedPattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
    ConstraintDescription: Must be a valid email address.
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC to deploy the public-facing Cloud Storage Security console.
    MinLength: 1
    ConstraintDescription: VPC is a mandatory input parameter. Select an existing VPC ID.
  SubnetA:
    Type: AWS::EC2::Subnet::Id
    Description: Choose a subnet that allows outbound internet traffic.
    MinLength: 1
    ConstraintDescription: Subnet A is a mandatory input parameter. Choose an existing subnet from the selected VPC.
  SubnetB:
    Type: AWS::EC2::Subnet::Id
    Description: Choose a second subnet in a different Availability Zone that allows outbound internet traffic.
    MinLength: 1
    ConstraintDescription: Subnet B is a mandatory input parameter. Select existing subnet from the selected VPC.
  ConsoleSecurityGroupCidrBlock:
    Type: String
    Description: IP address range with access to the Cloud Storage Security console website. Enter a single IP address in the form "X.X.X.X/32" or enter "0.0.0.0/0" for open access.
    MinLength: 9
    MaxLength: 18
    AllowedPattern: ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: Must be valid CIDR notation of the form "X.X.X.X/X".
  AgentScanningEngine:
    Type: String
    Default: "Sophos"
    AllowedValues: ["ClamAV", "Sophos"]
    Description: Scanning engine to deploy. Refer to AWS Marketplace to compare Sophos and Clam AV pricing.
  MultiEngineScanningMode:
    Type: String
    Default: "Disabled"
    AllowedValues: ["Disabled", "All", "LargeFiles"]
    Description: Choose "All" to enable scanning of all files simultaneously with both Sophos and ClamAV. Choose "LargeFiles" to use simultaneous scanning but Sophos only to scan files larger than 2GB. Premium Engine pricing applies. Refer to AWS Marketplace to compare Sophos and Clam AV pricing.
  AgentDiskSize:
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 200
    Description: Scanning engine disk size. If using the Sophos scanning engine, choose a larger disk size to enable large-file scanning (up to 200GB, but 5GB less that the total disk size).
  EnableLargeFileScanning:
    Type: String
    Default: "No"
    AllowedValues: ["Yes", "No"]
    Description: Pick Yes if you would like to have EC2 instances launched to scan files too large to be scanned by the normal agent
  LargeFileDiskSize:
    Type: Number
    Default: 2000
    MinValue: 20
    MaxValue: 16300
    Description: Choose a larger disk size (between 20 - 16,300 GB) to enable scanning larger files, up to 5 GB fewer than the total disk size. This only applies when using the Sophos scanning engine with EC2 large file scanning enabled.
  ExistingTransferFamilyServer:
    Type: String
    Default: "No"
    AllowedValues: ["Yes", "No"]
    Description: If you already have an existing Transfer Family server, and just want to deploy the Cloud Storage Security Console, choose "Yes".
  BucketsToProtect:
    Type: String
    Default: ""
    Description: Enter any pre-existing buckets that you would like to automatically enable event-based protection on. Bucket names must be separated by commas (e.g. bucket1,bucket2,bucket3). Protected buckets can be managed after deployment in the CSS Console.
  QSDisableAutoProtect:
    Type: String
    Default: "No"
    AllowedValues: ["Yes", "No"]
    Description: "By default, the bucket which is created to store files uploaded to the Transfer Server,
      is automatically protected by the CSS Console. It is highly recommended you keep the default value,
      in order to ensure all files uploaded are scanned for malware immediately."
Conditions:
  DeployTransferFamily: !Equals [!Ref ExistingTransferFamilyServer, "No"]
  DisableAutoProtect: !Equals [!Ref QSDisableAutoProtect, "Yes"]
Resources:
  CssConsoleStack:
    Type: AWS::CloudFormation::Stack
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      TemplateURL: !Sub "https://css-pub-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/templates/ConsoleCloudFormationTemplate.yaml"
      Parameters:
        UserName: !Ref UserName
        Email: !Ref Email
        VPC: !Ref VPC
        SubnetA: !Ref SubnetA
        SubnetB: !Ref SubnetB
        ConsoleSecurityGroupCidrBlock: !Ref ConsoleSecurityGroupCidrBlock
        AgentScanningEngine: !Ref AgentScanningEngine
        MultiEngineScanningMode: !Ref MultiEngineScanningMode
        AgentDiskSize: !Ref AgentDiskSize
        EnableLargeFileScanning: !Ref EnableLargeFileScanning
        LargeFileDiskSize: !Ref LargeFileDiskSize
        ProductMode: "AV"
        TemplateVariation: "TransferFamilyQuickstart"
        ParentStackName: !Ref AWS::StackName
        BucketsToProtect: !Ref BucketsToProtect
  TransferFamilyDestinationBucket:
    Type: AWS::S3::Bucket
    Condition: DeployTransferFamily
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "cloudstoragesec-transferfamily-${AWS::Region}-${CssConsoleStack.Outputs.ApplicationId}"
      Tags:
        - Key: !Sub
            - "${TagPrefix}-${CssConsoleStack.Outputs.ApplicationId}"
            - TagPrefix: !If [DisableAutoProtect, CloudStorageSecNoAutoProtect, CloudStorageSecAutoProtect]
          Value: "AutoProtect"
  TransferFamilyDestinationBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployTransferFamily
    Properties:
      Bucket: !Ref TransferFamilyDestinationBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: s3:GetObject
            Effect: Deny
            Principal:
              AWS: "*"
            Resource:
              - !Sub "${TransferFamilyDestinationBucket.Arn}"
              - !Sub "${TransferFamilyDestinationBucket.Arn}/*"
            Condition:
              StringNotEquals:
                s3:ExistingObjectTag/scan-result: Clean
                aws:PrincipalArn:
                  - !GetAtt TransferFamilyUserRole.Arn
                  - !GetAtt CssConsoleStack.Outputs.ConsoleTaskRoleArn
                  - !GetAtt CssConsoleStack.Outputs.AgentTaskRoleArn
  TransferFamilyAuthLambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: DeployTransferFamily
    Properties:
      RoleName: !Sub "CloudStorageSecTransferFamilyAuthLambdaExecutionRole-${CssConsoleStack.Outputs.ApplicationId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  TransferFamilyAuthHandler:
    Type: AWS::Lambda::Function
    Condition: DeployTransferFamily
    Properties:
      Code:
        S3Bucket: !Sub "css-pub-${AWS::Region}"
        S3Key: "lambdas/transfer_family_css_console_auth.zip"
      Role: !GetAtt TransferFamilyAuthLambdaExecutionRole.Arn
      Environment:
        Variables:
          CSS_CONSOLE_URL: !GetAtt CssConsoleStack.Outputs.ConsoleWebAddress
          TRANSFER_FAMILY_BUCKET_NAME: !Ref TransferFamilyDestinationBucket
          TRANSFER_FAMILY_USER_ROLE: !GetAtt TransferFamilyUserRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
  TransferFamilyAuthHandlerInvoke:
    Type: AWS::Lambda::Permission
    Condition: DeployTransferFamily
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TransferFamilyAuthHandler.Arn
      Principal: transfer.amazonaws.com
      SourceArn: !GetAtt TransferFamilyServer.Arn
  TransferFamilyUserRole:
    Type: AWS::IAM::Role
    Condition: DeployTransferFamily
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "s3:GetBucktLocation and s3:ListAllMyBuckets required '*' Resource"
      cfn-lint:
        config:
          ignore_checks: [EIAMPolicyActionWildcard, EIAMPolicyWildcardResource]
          ignore_reasons:
            EIAMPolicyWildcardResource: >
              s3:GetBucktLocation and s3:ListAllMyBuckets required '*' Resource
    Properties:
      RoleName: !Sub "CloudStorageSecTransferFamilyUserRole-${CssConsoleStack.Outputs.ApplicationId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
      Description: Cloud Storage Security role for Transfer Family Users
      Policies:
        - PolicyName: !Sub "CloudStorageSecTransferFamilyUserPolicy-${CssConsoleStack.Outputs.ApplicationId}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetBucketLocation
                  - s3:ListAllMyBuckets
                Effect: Allow
                Resource: "*"
              - Action:
                  - s3:DeleteObject
                  - s3:DeleteObjectVersion
                  - s3:GetObject
                  - s3:GetObjectACL
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:PutObjectACL
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !GetAtt TransferFamilyDestinationBucket.Arn
                  - !Sub "${TransferFamilyDestinationBucket.Arn}/*"
  TransferFamilyServerLoggingRole:
    Type: AWS::IAM::Role
    Condition: DeployTransferFamily
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: transfer.amazonaws.com
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchLogsFullAccess"
  TransferFamilyServer:
    Type: AWS::Transfer::Server
    Condition: DeployTransferFamily
    Properties:
      Domain: S3
      EndpointType: PUBLIC
      IdentityProviderType: AWS_LAMBDA
      IdentityProviderDetails:
        Function: !GetAtt TransferFamilyAuthHandler.Arn
      LoggingRole: !GetAtt TransferFamilyServerLoggingRole.Arn
      Protocols:
        - SFTP
      SecurityPolicyName: "TransferSecurityPolicy-2023-05"
Outputs:
  TransferFamilyDestinationBucket:
    Condition: DeployTransferFamily
    Description: Name of the bucket created for storing files uploaded to the transfer family server
    Value: !Ref TransferFamilyDestinationBucket
    Export:
      Name: !Sub "${AWS::StackName}-TransferFamilyDestinationBucket"
  TransferFamilyServerId:
    Condition: DeployTransferFamily
    Description: ID of the Transfer Family server.
    Value: !GetAtt TransferFamilyServer.ServerId
    Export:
      Name: !Sub "${AWS::StackName}-TransferFamilyServer"
  TransferFamilyPublicEndpoint:
    Condition: DeployTransferFamily
    Description: Public VPC endpoint for the Transfer Family AS2 server.
    Value: !Sub "${TransferFamilyServer.ServerId}.server.transfer.${AWS::Region}.${AWS::URLSuffix}"
    Export:
      Name: !Sub "${AWS::StackName}-TransferFamilyPublicEndpoint"
  ConsoleWebAddress:
    Description: Public DNS address of Console Web Interface
    Value: !GetAtt CssConsoleStack.Outputs.ConsoleWebAddress
  UserName:
    Description: User Name used to log in to console
    Value: !GetAtt CssConsoleStack.Outputs.UserName
  Password:
    Description: Temporary password used to log in to console
    Value: !GetAtt CssConsoleStack.Outputs.Password
  ProactiveNotificationsTopicArn:
    Description: ARN for the proactive notifications topic
    Value: !GetAtt CssConsoleStack.Outputs.ProactiveNotificationsTopicArn
    Export:
      Name: !Sub "${AWS::StackName}-proactive-notifications-sns-topic"
  CSSConsoleStackTemplateURL:
    Description: CFT used for deploying the CSS Console
    Value: !Sub "https://css-pub-${AWS::Region}.s3.${AWS::Region}.${AWS::URLSuffix}/templates/ConsoleCloudFormationTemplate.yaml"
